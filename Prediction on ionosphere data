{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rihannababzadeh/Machine-Learning-Projects/blob/main/Prediction%20on%20ionosphere%20data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k-Mf8Y-Akf4G"
      },
      "source": [
        "## **Task 2**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1TMurd9k1ciQ"
      },
      "source": [
        "This task is available on [Google Colab](https://colab.research.google.com/drive/11hSVlPQc4vZjd5cldnPgATLNX-96u2W3?usp=sharing)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5iRLUFacn4oj"
      },
      "source": [
        "# Importing mostly-used libraries.\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import sklearn\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import stats\n",
        "pd.set_option('display.max_rows', 20) #number of rows to show when printing a dataframe for a neat code file"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "-exA8Upu7CMd",
        "outputId": "a6ab0dc5-9920-482a-f309-75ef83d18b71"
      },
      "source": [
        "# Loading Ionosphere dataset in a pandas dataframe from a CSV file.\n",
        "ion_data =pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/ionosphere/ionosphere.data')\n",
        "ion_data"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     1  0  0.99539  -0.05889  0.85243  0.02306  0.83398  -0.37708      1.1  \\\n",
              "0    1  0  1.00000  -0.18829  0.93035 -0.36156 -0.10868  -0.93597  1.00000   \n",
              "1    1  0  1.00000  -0.03365  1.00000  0.00485  1.00000  -0.12062  0.88965   \n",
              "2    1  0  1.00000  -0.45161  1.00000  1.00000  0.71216  -1.00000  0.00000   \n",
              "3    1  0  1.00000  -0.02401  0.94140  0.06531  0.92106  -0.23255  0.77152   \n",
              "4    1  0  0.02337  -0.00592 -0.09924 -0.11949 -0.00763  -0.11824  0.14706   \n",
              "..  .. ..      ...       ...      ...      ...      ...       ...      ...   \n",
              "345  1  0  0.83508   0.08298  0.73739 -0.14706  0.84349  -0.05567  0.90441   \n",
              "346  1  0  0.95113   0.00419  0.95183 -0.02723  0.93438  -0.01920  0.94590   \n",
              "347  1  0  0.94701  -0.00034  0.93207 -0.03227  0.95177  -0.03431  0.95584   \n",
              "348  1  0  0.90608  -0.01657  0.98122 -0.01989  0.95691  -0.03646  0.85746   \n",
              "349  1  0  0.84710   0.13533  0.73638 -0.06151  0.87873   0.08260  0.88928   \n",
              "\n",
              "     0.03760  ...  -0.51171  0.41078  -0.46168  0.21266  -0.34090  0.42267  \\\n",
              "0   -0.04549  ...  -0.26569 -0.20468  -0.18401 -0.19040  -0.11593 -0.16626   \n",
              "1    0.01198  ...  -0.40220  0.58984  -0.22145  0.43100  -0.17365  0.60436   \n",
              "2    0.00000  ...   0.90695  0.51613   1.00000  1.00000  -0.20099  0.25682   \n",
              "3   -0.16399  ...  -0.65158  0.13290  -0.53206  0.02431  -0.62197 -0.05707   \n",
              "4    0.06637  ...  -0.01535 -0.03240   0.09223 -0.07859   0.00732  0.00000   \n",
              "..       ...  ...       ...      ...       ...      ...       ...      ...   \n",
              "345 -0.04622  ...  -0.04202  0.83479   0.00123  1.00000   0.12815  0.86660   \n",
              "346  0.01606  ...   0.01361  0.93522   0.04925  0.93159   0.08168  0.94066   \n",
              "347  0.02446  ...   0.03193  0.92489   0.02542  0.92120   0.02242  0.92459   \n",
              "348  0.00110  ...  -0.02099  0.89147  -0.07760  0.82983  -0.17238  0.96022   \n",
              "349 -0.09139  ...  -0.15114  0.81147  -0.04822  0.78207  -0.00703  0.75747   \n",
              "\n",
              "     -0.54487  0.18641  -0.45300  g  \n",
              "0    -0.06288 -0.13738  -0.02447  b  \n",
              "1    -0.24180  0.56045  -0.38238  g  \n",
              "2     1.00000 -0.32382   1.00000  b  \n",
              "3    -0.59573 -0.04608  -0.65697  g  \n",
              "4     0.00000 -0.00039   0.12011  b  \n",
              "..        ...      ...       ... ..  \n",
              "345  -0.10714  0.90546  -0.04307  g  \n",
              "346  -0.00035  0.91483   0.04712  g  \n",
              "347   0.00442  0.92697  -0.00577  g  \n",
              "348  -0.03757  0.87403  -0.16243  g  \n",
              "349  -0.06678  0.85764  -0.06151  g  \n",
              "\n",
              "[350 rows x 35 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2799dfb7-0ac1-4235-b7c6-105986997a87\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>1</th>\n",
              "      <th>0</th>\n",
              "      <th>0.99539</th>\n",
              "      <th>-0.05889</th>\n",
              "      <th>0.85243</th>\n",
              "      <th>0.02306</th>\n",
              "      <th>0.83398</th>\n",
              "      <th>-0.37708</th>\n",
              "      <th>1.1</th>\n",
              "      <th>0.03760</th>\n",
              "      <th>...</th>\n",
              "      <th>-0.51171</th>\n",
              "      <th>0.41078</th>\n",
              "      <th>-0.46168</th>\n",
              "      <th>0.21266</th>\n",
              "      <th>-0.34090</th>\n",
              "      <th>0.42267</th>\n",
              "      <th>-0.54487</th>\n",
              "      <th>0.18641</th>\n",
              "      <th>-0.45300</th>\n",
              "      <th>g</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.18829</td>\n",
              "      <td>0.93035</td>\n",
              "      <td>-0.36156</td>\n",
              "      <td>-0.10868</td>\n",
              "      <td>-0.93597</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.04549</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.26569</td>\n",
              "      <td>-0.20468</td>\n",
              "      <td>-0.18401</td>\n",
              "      <td>-0.19040</td>\n",
              "      <td>-0.11593</td>\n",
              "      <td>-0.16626</td>\n",
              "      <td>-0.06288</td>\n",
              "      <td>-0.13738</td>\n",
              "      <td>-0.02447</td>\n",
              "      <td>b</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.03365</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.00485</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.12062</td>\n",
              "      <td>0.88965</td>\n",
              "      <td>0.01198</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.40220</td>\n",
              "      <td>0.58984</td>\n",
              "      <td>-0.22145</td>\n",
              "      <td>0.43100</td>\n",
              "      <td>-0.17365</td>\n",
              "      <td>0.60436</td>\n",
              "      <td>-0.24180</td>\n",
              "      <td>0.56045</td>\n",
              "      <td>-0.38238</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.45161</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.71216</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.90695</td>\n",
              "      <td>0.51613</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.20099</td>\n",
              "      <td>0.25682</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.32382</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>b</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.02401</td>\n",
              "      <td>0.94140</td>\n",
              "      <td>0.06531</td>\n",
              "      <td>0.92106</td>\n",
              "      <td>-0.23255</td>\n",
              "      <td>0.77152</td>\n",
              "      <td>-0.16399</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.65158</td>\n",
              "      <td>0.13290</td>\n",
              "      <td>-0.53206</td>\n",
              "      <td>0.02431</td>\n",
              "      <td>-0.62197</td>\n",
              "      <td>-0.05707</td>\n",
              "      <td>-0.59573</td>\n",
              "      <td>-0.04608</td>\n",
              "      <td>-0.65697</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.02337</td>\n",
              "      <td>-0.00592</td>\n",
              "      <td>-0.09924</td>\n",
              "      <td>-0.11949</td>\n",
              "      <td>-0.00763</td>\n",
              "      <td>-0.11824</td>\n",
              "      <td>0.14706</td>\n",
              "      <td>0.06637</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.01535</td>\n",
              "      <td>-0.03240</td>\n",
              "      <td>0.09223</td>\n",
              "      <td>-0.07859</td>\n",
              "      <td>0.00732</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>-0.00039</td>\n",
              "      <td>0.12011</td>\n",
              "      <td>b</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>345</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.83508</td>\n",
              "      <td>0.08298</td>\n",
              "      <td>0.73739</td>\n",
              "      <td>-0.14706</td>\n",
              "      <td>0.84349</td>\n",
              "      <td>-0.05567</td>\n",
              "      <td>0.90441</td>\n",
              "      <td>-0.04622</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.04202</td>\n",
              "      <td>0.83479</td>\n",
              "      <td>0.00123</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.12815</td>\n",
              "      <td>0.86660</td>\n",
              "      <td>-0.10714</td>\n",
              "      <td>0.90546</td>\n",
              "      <td>-0.04307</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>346</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.95113</td>\n",
              "      <td>0.00419</td>\n",
              "      <td>0.95183</td>\n",
              "      <td>-0.02723</td>\n",
              "      <td>0.93438</td>\n",
              "      <td>-0.01920</td>\n",
              "      <td>0.94590</td>\n",
              "      <td>0.01606</td>\n",
              "      <td>...</td>\n",
              "      <td>0.01361</td>\n",
              "      <td>0.93522</td>\n",
              "      <td>0.04925</td>\n",
              "      <td>0.93159</td>\n",
              "      <td>0.08168</td>\n",
              "      <td>0.94066</td>\n",
              "      <td>-0.00035</td>\n",
              "      <td>0.91483</td>\n",
              "      <td>0.04712</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.94701</td>\n",
              "      <td>-0.00034</td>\n",
              "      <td>0.93207</td>\n",
              "      <td>-0.03227</td>\n",
              "      <td>0.95177</td>\n",
              "      <td>-0.03431</td>\n",
              "      <td>0.95584</td>\n",
              "      <td>0.02446</td>\n",
              "      <td>...</td>\n",
              "      <td>0.03193</td>\n",
              "      <td>0.92489</td>\n",
              "      <td>0.02542</td>\n",
              "      <td>0.92120</td>\n",
              "      <td>0.02242</td>\n",
              "      <td>0.92459</td>\n",
              "      <td>0.00442</td>\n",
              "      <td>0.92697</td>\n",
              "      <td>-0.00577</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>348</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.90608</td>\n",
              "      <td>-0.01657</td>\n",
              "      <td>0.98122</td>\n",
              "      <td>-0.01989</td>\n",
              "      <td>0.95691</td>\n",
              "      <td>-0.03646</td>\n",
              "      <td>0.85746</td>\n",
              "      <td>0.00110</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.02099</td>\n",
              "      <td>0.89147</td>\n",
              "      <td>-0.07760</td>\n",
              "      <td>0.82983</td>\n",
              "      <td>-0.17238</td>\n",
              "      <td>0.96022</td>\n",
              "      <td>-0.03757</td>\n",
              "      <td>0.87403</td>\n",
              "      <td>-0.16243</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>349</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.84710</td>\n",
              "      <td>0.13533</td>\n",
              "      <td>0.73638</td>\n",
              "      <td>-0.06151</td>\n",
              "      <td>0.87873</td>\n",
              "      <td>0.08260</td>\n",
              "      <td>0.88928</td>\n",
              "      <td>-0.09139</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.15114</td>\n",
              "      <td>0.81147</td>\n",
              "      <td>-0.04822</td>\n",
              "      <td>0.78207</td>\n",
              "      <td>-0.00703</td>\n",
              "      <td>0.75747</td>\n",
              "      <td>-0.06678</td>\n",
              "      <td>0.85764</td>\n",
              "      <td>-0.06151</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>350 rows × 35 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2799dfb7-0ac1-4235-b7c6-105986997a87')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2799dfb7-0ac1-4235-b7c6-105986997a87 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2799dfb7-0ac1-4235-b7c6-105986997a87');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AJoopGY79OGV"
      },
      "source": [
        "# Our dataset appears to have no column names. let's add names for the columns\n",
        "col = []\n",
        "for i in range(ion_data.shape[1]):\n",
        "  col.append(\"F\" + str(i+1))\n",
        "col\n",
        "ion_data.columns = col"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "dAED0PdOzXvb",
        "outputId": "6343913d-c9a8-47ac-c2c7-e36d256b6c6b"
      },
      "source": [
        "ion_data # Now the dataset has column names."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     F1  F2       F3       F4       F5       F6       F7       F8       F9  \\\n",
              "0     1   0  1.00000 -0.18829  0.93035 -0.36156 -0.10868 -0.93597  1.00000   \n",
              "1     1   0  1.00000 -0.03365  1.00000  0.00485  1.00000 -0.12062  0.88965   \n",
              "2     1   0  1.00000 -0.45161  1.00000  1.00000  0.71216 -1.00000  0.00000   \n",
              "3     1   0  1.00000 -0.02401  0.94140  0.06531  0.92106 -0.23255  0.77152   \n",
              "4     1   0  0.02337 -0.00592 -0.09924 -0.11949 -0.00763 -0.11824  0.14706   \n",
              "..   ..  ..      ...      ...      ...      ...      ...      ...      ...   \n",
              "345   1   0  0.83508  0.08298  0.73739 -0.14706  0.84349 -0.05567  0.90441   \n",
              "346   1   0  0.95113  0.00419  0.95183 -0.02723  0.93438 -0.01920  0.94590   \n",
              "347   1   0  0.94701 -0.00034  0.93207 -0.03227  0.95177 -0.03431  0.95584   \n",
              "348   1   0  0.90608 -0.01657  0.98122 -0.01989  0.95691 -0.03646  0.85746   \n",
              "349   1   0  0.84710  0.13533  0.73638 -0.06151  0.87873  0.08260  0.88928   \n",
              "\n",
              "         F10  ...      F26      F27      F28      F29      F30      F31  \\\n",
              "0   -0.04549  ... -0.26569 -0.20468 -0.18401 -0.19040 -0.11593 -0.16626   \n",
              "1    0.01198  ... -0.40220  0.58984 -0.22145  0.43100 -0.17365  0.60436   \n",
              "2    0.00000  ...  0.90695  0.51613  1.00000  1.00000 -0.20099  0.25682   \n",
              "3   -0.16399  ... -0.65158  0.13290 -0.53206  0.02431 -0.62197 -0.05707   \n",
              "4    0.06637  ... -0.01535 -0.03240  0.09223 -0.07859  0.00732  0.00000   \n",
              "..       ...  ...      ...      ...      ...      ...      ...      ...   \n",
              "345 -0.04622  ... -0.04202  0.83479  0.00123  1.00000  0.12815  0.86660   \n",
              "346  0.01606  ...  0.01361  0.93522  0.04925  0.93159  0.08168  0.94066   \n",
              "347  0.02446  ...  0.03193  0.92489  0.02542  0.92120  0.02242  0.92459   \n",
              "348  0.00110  ... -0.02099  0.89147 -0.07760  0.82983 -0.17238  0.96022   \n",
              "349 -0.09139  ... -0.15114  0.81147 -0.04822  0.78207 -0.00703  0.75747   \n",
              "\n",
              "         F32      F33      F34  F35  \n",
              "0   -0.06288 -0.13738 -0.02447    b  \n",
              "1   -0.24180  0.56045 -0.38238    g  \n",
              "2    1.00000 -0.32382  1.00000    b  \n",
              "3   -0.59573 -0.04608 -0.65697    g  \n",
              "4    0.00000 -0.00039  0.12011    b  \n",
              "..       ...      ...      ...  ...  \n",
              "345 -0.10714  0.90546 -0.04307    g  \n",
              "346 -0.00035  0.91483  0.04712    g  \n",
              "347  0.00442  0.92697 -0.00577    g  \n",
              "348 -0.03757  0.87403 -0.16243    g  \n",
              "349 -0.06678  0.85764 -0.06151    g  \n",
              "\n",
              "[350 rows x 35 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-07e60ff3-8460-4502-9f8f-e3d237ebbbdd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>F1</th>\n",
              "      <th>F2</th>\n",
              "      <th>F3</th>\n",
              "      <th>F4</th>\n",
              "      <th>F5</th>\n",
              "      <th>F6</th>\n",
              "      <th>F7</th>\n",
              "      <th>F8</th>\n",
              "      <th>F9</th>\n",
              "      <th>F10</th>\n",
              "      <th>...</th>\n",
              "      <th>F26</th>\n",
              "      <th>F27</th>\n",
              "      <th>F28</th>\n",
              "      <th>F29</th>\n",
              "      <th>F30</th>\n",
              "      <th>F31</th>\n",
              "      <th>F32</th>\n",
              "      <th>F33</th>\n",
              "      <th>F34</th>\n",
              "      <th>F35</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.18829</td>\n",
              "      <td>0.93035</td>\n",
              "      <td>-0.36156</td>\n",
              "      <td>-0.10868</td>\n",
              "      <td>-0.93597</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.04549</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.26569</td>\n",
              "      <td>-0.20468</td>\n",
              "      <td>-0.18401</td>\n",
              "      <td>-0.19040</td>\n",
              "      <td>-0.11593</td>\n",
              "      <td>-0.16626</td>\n",
              "      <td>-0.06288</td>\n",
              "      <td>-0.13738</td>\n",
              "      <td>-0.02447</td>\n",
              "      <td>b</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.03365</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.00485</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.12062</td>\n",
              "      <td>0.88965</td>\n",
              "      <td>0.01198</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.40220</td>\n",
              "      <td>0.58984</td>\n",
              "      <td>-0.22145</td>\n",
              "      <td>0.43100</td>\n",
              "      <td>-0.17365</td>\n",
              "      <td>0.60436</td>\n",
              "      <td>-0.24180</td>\n",
              "      <td>0.56045</td>\n",
              "      <td>-0.38238</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.45161</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.71216</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.90695</td>\n",
              "      <td>0.51613</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.20099</td>\n",
              "      <td>0.25682</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.32382</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>b</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.02401</td>\n",
              "      <td>0.94140</td>\n",
              "      <td>0.06531</td>\n",
              "      <td>0.92106</td>\n",
              "      <td>-0.23255</td>\n",
              "      <td>0.77152</td>\n",
              "      <td>-0.16399</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.65158</td>\n",
              "      <td>0.13290</td>\n",
              "      <td>-0.53206</td>\n",
              "      <td>0.02431</td>\n",
              "      <td>-0.62197</td>\n",
              "      <td>-0.05707</td>\n",
              "      <td>-0.59573</td>\n",
              "      <td>-0.04608</td>\n",
              "      <td>-0.65697</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.02337</td>\n",
              "      <td>-0.00592</td>\n",
              "      <td>-0.09924</td>\n",
              "      <td>-0.11949</td>\n",
              "      <td>-0.00763</td>\n",
              "      <td>-0.11824</td>\n",
              "      <td>0.14706</td>\n",
              "      <td>0.06637</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.01535</td>\n",
              "      <td>-0.03240</td>\n",
              "      <td>0.09223</td>\n",
              "      <td>-0.07859</td>\n",
              "      <td>0.00732</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>-0.00039</td>\n",
              "      <td>0.12011</td>\n",
              "      <td>b</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>345</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.83508</td>\n",
              "      <td>0.08298</td>\n",
              "      <td>0.73739</td>\n",
              "      <td>-0.14706</td>\n",
              "      <td>0.84349</td>\n",
              "      <td>-0.05567</td>\n",
              "      <td>0.90441</td>\n",
              "      <td>-0.04622</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.04202</td>\n",
              "      <td>0.83479</td>\n",
              "      <td>0.00123</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.12815</td>\n",
              "      <td>0.86660</td>\n",
              "      <td>-0.10714</td>\n",
              "      <td>0.90546</td>\n",
              "      <td>-0.04307</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>346</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.95113</td>\n",
              "      <td>0.00419</td>\n",
              "      <td>0.95183</td>\n",
              "      <td>-0.02723</td>\n",
              "      <td>0.93438</td>\n",
              "      <td>-0.01920</td>\n",
              "      <td>0.94590</td>\n",
              "      <td>0.01606</td>\n",
              "      <td>...</td>\n",
              "      <td>0.01361</td>\n",
              "      <td>0.93522</td>\n",
              "      <td>0.04925</td>\n",
              "      <td>0.93159</td>\n",
              "      <td>0.08168</td>\n",
              "      <td>0.94066</td>\n",
              "      <td>-0.00035</td>\n",
              "      <td>0.91483</td>\n",
              "      <td>0.04712</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.94701</td>\n",
              "      <td>-0.00034</td>\n",
              "      <td>0.93207</td>\n",
              "      <td>-0.03227</td>\n",
              "      <td>0.95177</td>\n",
              "      <td>-0.03431</td>\n",
              "      <td>0.95584</td>\n",
              "      <td>0.02446</td>\n",
              "      <td>...</td>\n",
              "      <td>0.03193</td>\n",
              "      <td>0.92489</td>\n",
              "      <td>0.02542</td>\n",
              "      <td>0.92120</td>\n",
              "      <td>0.02242</td>\n",
              "      <td>0.92459</td>\n",
              "      <td>0.00442</td>\n",
              "      <td>0.92697</td>\n",
              "      <td>-0.00577</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>348</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.90608</td>\n",
              "      <td>-0.01657</td>\n",
              "      <td>0.98122</td>\n",
              "      <td>-0.01989</td>\n",
              "      <td>0.95691</td>\n",
              "      <td>-0.03646</td>\n",
              "      <td>0.85746</td>\n",
              "      <td>0.00110</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.02099</td>\n",
              "      <td>0.89147</td>\n",
              "      <td>-0.07760</td>\n",
              "      <td>0.82983</td>\n",
              "      <td>-0.17238</td>\n",
              "      <td>0.96022</td>\n",
              "      <td>-0.03757</td>\n",
              "      <td>0.87403</td>\n",
              "      <td>-0.16243</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>349</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.84710</td>\n",
              "      <td>0.13533</td>\n",
              "      <td>0.73638</td>\n",
              "      <td>-0.06151</td>\n",
              "      <td>0.87873</td>\n",
              "      <td>0.08260</td>\n",
              "      <td>0.88928</td>\n",
              "      <td>-0.09139</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.15114</td>\n",
              "      <td>0.81147</td>\n",
              "      <td>-0.04822</td>\n",
              "      <td>0.78207</td>\n",
              "      <td>-0.00703</td>\n",
              "      <td>0.75747</td>\n",
              "      <td>-0.06678</td>\n",
              "      <td>0.85764</td>\n",
              "      <td>-0.06151</td>\n",
              "      <td>g</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>350 rows × 35 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-07e60ff3-8460-4502-9f8f-e3d237ebbbdd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-07e60ff3-8460-4502-9f8f-e3d237ebbbdd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-07e60ff3-8460-4502-9f8f-e3d237ebbbdd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8sJ8WLJDAD_O"
      },
      "source": [
        "data = ion_data[\"F35\"].copy() # Copying last column to perfrom numerization on it\n",
        "good_bad_class_dict = {'b': 0, 'g' : 1} # Assigning 0 to bad and 1 to good\n",
        "data = data.map(good_bad_class_dict) # Mapping column to have 0 and 1 instead of 'g' and 'b'.\n",
        "ion_data['F35'] = data  # Updating dataset to have numeric format F35 column.\n",
        "ion_data.rename(columns={'F35' : 'Class'}, inplace=True) # Renaming the last column to class."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "6lNDhb0W3PDd",
        "outputId": "0fc57641-3973-4156-b2a8-c6ca27b9fc90"
      },
      "source": [
        "ion_data # Taking a look at our clean dataset."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     F1  F2       F3       F4       F5       F6       F7       F8       F9  \\\n",
              "0     1   0  1.00000 -0.18829  0.93035 -0.36156 -0.10868 -0.93597  1.00000   \n",
              "1     1   0  1.00000 -0.03365  1.00000  0.00485  1.00000 -0.12062  0.88965   \n",
              "2     1   0  1.00000 -0.45161  1.00000  1.00000  0.71216 -1.00000  0.00000   \n",
              "3     1   0  1.00000 -0.02401  0.94140  0.06531  0.92106 -0.23255  0.77152   \n",
              "4     1   0  0.02337 -0.00592 -0.09924 -0.11949 -0.00763 -0.11824  0.14706   \n",
              "..   ..  ..      ...      ...      ...      ...      ...      ...      ...   \n",
              "345   1   0  0.83508  0.08298  0.73739 -0.14706  0.84349 -0.05567  0.90441   \n",
              "346   1   0  0.95113  0.00419  0.95183 -0.02723  0.93438 -0.01920  0.94590   \n",
              "347   1   0  0.94701 -0.00034  0.93207 -0.03227  0.95177 -0.03431  0.95584   \n",
              "348   1   0  0.90608 -0.01657  0.98122 -0.01989  0.95691 -0.03646  0.85746   \n",
              "349   1   0  0.84710  0.13533  0.73638 -0.06151  0.87873  0.08260  0.88928   \n",
              "\n",
              "         F10  ...      F26      F27      F28      F29      F30      F31  \\\n",
              "0   -0.04549  ... -0.26569 -0.20468 -0.18401 -0.19040 -0.11593 -0.16626   \n",
              "1    0.01198  ... -0.40220  0.58984 -0.22145  0.43100 -0.17365  0.60436   \n",
              "2    0.00000  ...  0.90695  0.51613  1.00000  1.00000 -0.20099  0.25682   \n",
              "3   -0.16399  ... -0.65158  0.13290 -0.53206  0.02431 -0.62197 -0.05707   \n",
              "4    0.06637  ... -0.01535 -0.03240  0.09223 -0.07859  0.00732  0.00000   \n",
              "..       ...  ...      ...      ...      ...      ...      ...      ...   \n",
              "345 -0.04622  ... -0.04202  0.83479  0.00123  1.00000  0.12815  0.86660   \n",
              "346  0.01606  ...  0.01361  0.93522  0.04925  0.93159  0.08168  0.94066   \n",
              "347  0.02446  ...  0.03193  0.92489  0.02542  0.92120  0.02242  0.92459   \n",
              "348  0.00110  ... -0.02099  0.89147 -0.07760  0.82983 -0.17238  0.96022   \n",
              "349 -0.09139  ... -0.15114  0.81147 -0.04822  0.78207 -0.00703  0.75747   \n",
              "\n",
              "         F32      F33      F34  Class  \n",
              "0   -0.06288 -0.13738 -0.02447      0  \n",
              "1   -0.24180  0.56045 -0.38238      1  \n",
              "2    1.00000 -0.32382  1.00000      0  \n",
              "3   -0.59573 -0.04608 -0.65697      1  \n",
              "4    0.00000 -0.00039  0.12011      0  \n",
              "..       ...      ...      ...    ...  \n",
              "345 -0.10714  0.90546 -0.04307      1  \n",
              "346 -0.00035  0.91483  0.04712      1  \n",
              "347  0.00442  0.92697 -0.00577      1  \n",
              "348 -0.03757  0.87403 -0.16243      1  \n",
              "349 -0.06678  0.85764 -0.06151      1  \n",
              "\n",
              "[350 rows x 35 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e5a323d8-2810-422e-aafc-7982a12bd9b4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>F1</th>\n",
              "      <th>F2</th>\n",
              "      <th>F3</th>\n",
              "      <th>F4</th>\n",
              "      <th>F5</th>\n",
              "      <th>F6</th>\n",
              "      <th>F7</th>\n",
              "      <th>F8</th>\n",
              "      <th>F9</th>\n",
              "      <th>F10</th>\n",
              "      <th>...</th>\n",
              "      <th>F26</th>\n",
              "      <th>F27</th>\n",
              "      <th>F28</th>\n",
              "      <th>F29</th>\n",
              "      <th>F30</th>\n",
              "      <th>F31</th>\n",
              "      <th>F32</th>\n",
              "      <th>F33</th>\n",
              "      <th>F34</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.18829</td>\n",
              "      <td>0.93035</td>\n",
              "      <td>-0.36156</td>\n",
              "      <td>-0.10868</td>\n",
              "      <td>-0.93597</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.04549</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.26569</td>\n",
              "      <td>-0.20468</td>\n",
              "      <td>-0.18401</td>\n",
              "      <td>-0.19040</td>\n",
              "      <td>-0.11593</td>\n",
              "      <td>-0.16626</td>\n",
              "      <td>-0.06288</td>\n",
              "      <td>-0.13738</td>\n",
              "      <td>-0.02447</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.03365</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.00485</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.12062</td>\n",
              "      <td>0.88965</td>\n",
              "      <td>0.01198</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.40220</td>\n",
              "      <td>0.58984</td>\n",
              "      <td>-0.22145</td>\n",
              "      <td>0.43100</td>\n",
              "      <td>-0.17365</td>\n",
              "      <td>0.60436</td>\n",
              "      <td>-0.24180</td>\n",
              "      <td>0.56045</td>\n",
              "      <td>-0.38238</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.45161</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.71216</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.90695</td>\n",
              "      <td>0.51613</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.20099</td>\n",
              "      <td>0.25682</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.32382</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.02401</td>\n",
              "      <td>0.94140</td>\n",
              "      <td>0.06531</td>\n",
              "      <td>0.92106</td>\n",
              "      <td>-0.23255</td>\n",
              "      <td>0.77152</td>\n",
              "      <td>-0.16399</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.65158</td>\n",
              "      <td>0.13290</td>\n",
              "      <td>-0.53206</td>\n",
              "      <td>0.02431</td>\n",
              "      <td>-0.62197</td>\n",
              "      <td>-0.05707</td>\n",
              "      <td>-0.59573</td>\n",
              "      <td>-0.04608</td>\n",
              "      <td>-0.65697</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.02337</td>\n",
              "      <td>-0.00592</td>\n",
              "      <td>-0.09924</td>\n",
              "      <td>-0.11949</td>\n",
              "      <td>-0.00763</td>\n",
              "      <td>-0.11824</td>\n",
              "      <td>0.14706</td>\n",
              "      <td>0.06637</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.01535</td>\n",
              "      <td>-0.03240</td>\n",
              "      <td>0.09223</td>\n",
              "      <td>-0.07859</td>\n",
              "      <td>0.00732</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>-0.00039</td>\n",
              "      <td>0.12011</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>345</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.83508</td>\n",
              "      <td>0.08298</td>\n",
              "      <td>0.73739</td>\n",
              "      <td>-0.14706</td>\n",
              "      <td>0.84349</td>\n",
              "      <td>-0.05567</td>\n",
              "      <td>0.90441</td>\n",
              "      <td>-0.04622</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.04202</td>\n",
              "      <td>0.83479</td>\n",
              "      <td>0.00123</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.12815</td>\n",
              "      <td>0.86660</td>\n",
              "      <td>-0.10714</td>\n",
              "      <td>0.90546</td>\n",
              "      <td>-0.04307</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>346</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.95113</td>\n",
              "      <td>0.00419</td>\n",
              "      <td>0.95183</td>\n",
              "      <td>-0.02723</td>\n",
              "      <td>0.93438</td>\n",
              "      <td>-0.01920</td>\n",
              "      <td>0.94590</td>\n",
              "      <td>0.01606</td>\n",
              "      <td>...</td>\n",
              "      <td>0.01361</td>\n",
              "      <td>0.93522</td>\n",
              "      <td>0.04925</td>\n",
              "      <td>0.93159</td>\n",
              "      <td>0.08168</td>\n",
              "      <td>0.94066</td>\n",
              "      <td>-0.00035</td>\n",
              "      <td>0.91483</td>\n",
              "      <td>0.04712</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.94701</td>\n",
              "      <td>-0.00034</td>\n",
              "      <td>0.93207</td>\n",
              "      <td>-0.03227</td>\n",
              "      <td>0.95177</td>\n",
              "      <td>-0.03431</td>\n",
              "      <td>0.95584</td>\n",
              "      <td>0.02446</td>\n",
              "      <td>...</td>\n",
              "      <td>0.03193</td>\n",
              "      <td>0.92489</td>\n",
              "      <td>0.02542</td>\n",
              "      <td>0.92120</td>\n",
              "      <td>0.02242</td>\n",
              "      <td>0.92459</td>\n",
              "      <td>0.00442</td>\n",
              "      <td>0.92697</td>\n",
              "      <td>-0.00577</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>348</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.90608</td>\n",
              "      <td>-0.01657</td>\n",
              "      <td>0.98122</td>\n",
              "      <td>-0.01989</td>\n",
              "      <td>0.95691</td>\n",
              "      <td>-0.03646</td>\n",
              "      <td>0.85746</td>\n",
              "      <td>0.00110</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.02099</td>\n",
              "      <td>0.89147</td>\n",
              "      <td>-0.07760</td>\n",
              "      <td>0.82983</td>\n",
              "      <td>-0.17238</td>\n",
              "      <td>0.96022</td>\n",
              "      <td>-0.03757</td>\n",
              "      <td>0.87403</td>\n",
              "      <td>-0.16243</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>349</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.84710</td>\n",
              "      <td>0.13533</td>\n",
              "      <td>0.73638</td>\n",
              "      <td>-0.06151</td>\n",
              "      <td>0.87873</td>\n",
              "      <td>0.08260</td>\n",
              "      <td>0.88928</td>\n",
              "      <td>-0.09139</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.15114</td>\n",
              "      <td>0.81147</td>\n",
              "      <td>-0.04822</td>\n",
              "      <td>0.78207</td>\n",
              "      <td>-0.00703</td>\n",
              "      <td>0.75747</td>\n",
              "      <td>-0.06678</td>\n",
              "      <td>0.85764</td>\n",
              "      <td>-0.06151</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>350 rows × 35 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5a323d8-2810-422e-aafc-7982a12bd9b4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e5a323d8-2810-422e-aafc-7982a12bd9b4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e5a323d8-2810-422e-aafc-7982a12bd9b4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p2cXQxlDm3T9"
      },
      "source": [
        "**Breaking down the dataset to input matrix and output vector**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UvRLxjvvDDLh",
        "outputId": "d6db0a82-ea01-4766-9f8d-3ab9c2b52a37"
      },
      "source": [
        "# Taking a look before splitting x and y.\n",
        "\n",
        "print(ion_data.iloc[:,:34])\n",
        "print(ion_data.iloc[:,34])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "     F1  F2       F3       F4  ...      F31      F32      F33      F34\n",
            "0     1   0  1.00000 -0.18829  ... -0.16626 -0.06288 -0.13738 -0.02447\n",
            "1     1   0  1.00000 -0.03365  ...  0.60436 -0.24180  0.56045 -0.38238\n",
            "2     1   0  1.00000 -0.45161  ...  0.25682  1.00000 -0.32382  1.00000\n",
            "3     1   0  1.00000 -0.02401  ... -0.05707 -0.59573 -0.04608 -0.65697\n",
            "4     1   0  0.02337 -0.00592  ...  0.00000  0.00000 -0.00039  0.12011\n",
            "..   ..  ..      ...      ...  ...      ...      ...      ...      ...\n",
            "345   1   0  0.83508  0.08298  ...  0.86660 -0.10714  0.90546 -0.04307\n",
            "346   1   0  0.95113  0.00419  ...  0.94066 -0.00035  0.91483  0.04712\n",
            "347   1   0  0.94701 -0.00034  ...  0.92459  0.00442  0.92697 -0.00577\n",
            "348   1   0  0.90608 -0.01657  ...  0.96022 -0.03757  0.87403 -0.16243\n",
            "349   1   0  0.84710  0.13533  ...  0.75747 -0.06678  0.85764 -0.06151\n",
            "\n",
            "[350 rows x 34 columns]\n",
            "0      0\n",
            "1      1\n",
            "2      0\n",
            "3      1\n",
            "4      0\n",
            "      ..\n",
            "345    1\n",
            "346    1\n",
            "347    1\n",
            "348    1\n",
            "349    1\n",
            "Name: Class, Length: 350, dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wN16Nzt0DDLl"
      },
      "source": [
        "# Splitting dataset into inputs x and output y.\n",
        "X_ion = ion_data.iloc[:,:34]\n",
        "y_ion = ion_data.iloc[:,34]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h1jTV01_nkV3"
      },
      "source": [
        "*You can comment out these two block to see how the results will look like with feature selection. The analysis we have at the end of this file are without feature selection though.*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2c6mq7RFDDLo"
      },
      "source": [
        "# #Performing F_test to select 3 best features to train a regession model.\n",
        "\n",
        "# from sklearn.feature_selection import SelectKBest\n",
        "# from sklearn.feature_selection import f_regression\n",
        "# X_ion_subset = SelectKBest(f_regression, k=20).fit_transform(X_ion, y_ion)\n",
        "# # get_support(indices=True)\n",
        "# cols = []\n",
        "# for c_name in range(X_ion_subset.shape[1]):\n",
        "#   cols.append((X_ion == X_ion_subset[0][c_name]).idxmax(axis=1)[0])\n",
        "# print('Selected features are:')\n",
        "# for i in cols:\n",
        "#   print(i)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HljslTg7DDLq"
      },
      "source": [
        "# Now we can drop any other feature from our input dataframe and only keep the 3 best features.\n",
        "\n",
        "# X_ion.drop(X_ion.columns.difference(cols), 1, inplace=True)\n",
        "# X_ion"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y212oIxDn1Cg"
      },
      "source": [
        "Splitting the dataset into test and train"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "6LMm2G2T2nvm",
        "outputId": "0147ceb3-8ff5-4248-9253-d632de311c2a"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_ion_train , X_ion_test , y_ion_train , y_ion_test = train_test_split(X_ion,y_ion,test_size = 0.3 , random_state = 42)\n",
        "X_ion_train #check to see if it works well"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>F1</th>\n",
              "      <th>F2</th>\n",
              "      <th>F3</th>\n",
              "      <th>F4</th>\n",
              "      <th>F5</th>\n",
              "      <th>F6</th>\n",
              "      <th>F7</th>\n",
              "      <th>F8</th>\n",
              "      <th>F9</th>\n",
              "      <th>F10</th>\n",
              "      <th>F11</th>\n",
              "      <th>F12</th>\n",
              "      <th>F13</th>\n",
              "      <th>F14</th>\n",
              "      <th>F15</th>\n",
              "      <th>F16</th>\n",
              "      <th>F17</th>\n",
              "      <th>F18</th>\n",
              "      <th>F19</th>\n",
              "      <th>F20</th>\n",
              "      <th>F21</th>\n",
              "      <th>F22</th>\n",
              "      <th>F23</th>\n",
              "      <th>F24</th>\n",
              "      <th>F25</th>\n",
              "      <th>F26</th>\n",
              "      <th>F27</th>\n",
              "      <th>F28</th>\n",
              "      <th>F29</th>\n",
              "      <th>F30</th>\n",
              "      <th>F31</th>\n",
              "      <th>F32</th>\n",
              "      <th>F33</th>\n",
              "      <th>F34</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>139</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.94531</td>\n",
              "      <td>-0.03516</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>-0.33203</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>-0.01563</td>\n",
              "      <td>0.97266</td>\n",
              "      <td>0.01172</td>\n",
              "      <td>0.93359</td>\n",
              "      <td>-0.01953</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>0.16406</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>-0.00391</td>\n",
              "      <td>0.95313</td>\n",
              "      <td>-0.03516</td>\n",
              "      <td>0.92188</td>\n",
              "      <td>-0.02734</td>\n",
              "      <td>-0.99219</td>\n",
              "      <td>0.11719</td>\n",
              "      <td>-0.93359</td>\n",
              "      <td>0.34766</td>\n",
              "      <td>0.95703</td>\n",
              "      <td>-0.00391</td>\n",
              "      <td>0.82041</td>\n",
              "      <td>0.13758</td>\n",
              "      <td>0.90234</td>\n",
              "      <td>-0.06641</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>-0.18750</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>-0.34375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>79</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.06604</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.62937</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.09557</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.20280</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.40559</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.15851</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.04895</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.61538</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.26573</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.58042</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.81372</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.78555</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.48252</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.98182</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.88627</td>\n",
              "      <td>0.03131</td>\n",
              "      <td>0.86249</td>\n",
              "      <td>0.04572</td>\n",
              "      <td>0.80000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.69091</td>\n",
              "      <td>0.04545</td>\n",
              "      <td>0.79343</td>\n",
              "      <td>0.08436</td>\n",
              "      <td>0.77118</td>\n",
              "      <td>0.09579</td>\n",
              "      <td>0.62727</td>\n",
              "      <td>0.25455</td>\n",
              "      <td>0.68182</td>\n",
              "      <td>0.12727</td>\n",
              "      <td>0.70674</td>\n",
              "      <td>0.12608</td>\n",
              "      <td>0.68604</td>\n",
              "      <td>0.13493</td>\n",
              "      <td>0.74545</td>\n",
              "      <td>0.22727</td>\n",
              "      <td>0.64581</td>\n",
              "      <td>0.15088</td>\n",
              "      <td>0.67273</td>\n",
              "      <td>0.02727</td>\n",
              "      <td>0.60715</td>\n",
              "      <td>0.16465</td>\n",
              "      <td>0.58840</td>\n",
              "      <td>0.17077</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>-0.71875</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.56250</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>223</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.96087</td>\n",
              "      <td>0.08620</td>\n",
              "      <td>0.96760</td>\n",
              "      <td>0.19279</td>\n",
              "      <td>0.96026</td>\n",
              "      <td>0.27451</td>\n",
              "      <td>0.98044</td>\n",
              "      <td>0.35052</td>\n",
              "      <td>0.92867</td>\n",
              "      <td>0.46281</td>\n",
              "      <td>0.86265</td>\n",
              "      <td>0.52517</td>\n",
              "      <td>0.82820</td>\n",
              "      <td>0.58794</td>\n",
              "      <td>0.73242</td>\n",
              "      <td>0.69065</td>\n",
              "      <td>0.69003</td>\n",
              "      <td>0.73140</td>\n",
              "      <td>0.54473</td>\n",
              "      <td>0.68820</td>\n",
              "      <td>0.48339</td>\n",
              "      <td>0.76197</td>\n",
              "      <td>0.40615</td>\n",
              "      <td>0.74689</td>\n",
              "      <td>0.33401</td>\n",
              "      <td>0.83796</td>\n",
              "      <td>0.24944</td>\n",
              "      <td>0.86061</td>\n",
              "      <td>0.13756</td>\n",
              "      <td>0.86835</td>\n",
              "      <td>0.09048</td>\n",
              "      <td>0.86285</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.99449</td>\n",
              "      <td>0.00526</td>\n",
              "      <td>0.84082</td>\n",
              "      <td>-0.11313</td>\n",
              "      <td>0.88237</td>\n",
              "      <td>-0.16431</td>\n",
              "      <td>0.99061</td>\n",
              "      <td>-0.06257</td>\n",
              "      <td>0.96484</td>\n",
              "      <td>-0.07496</td>\n",
              "      <td>0.85221</td>\n",
              "      <td>0.02966</td>\n",
              "      <td>0.87161</td>\n",
              "      <td>-0.20848</td>\n",
              "      <td>0.93881</td>\n",
              "      <td>-0.12977</td>\n",
              "      <td>0.98298</td>\n",
              "      <td>-0.08935</td>\n",
              "      <td>0.89876</td>\n",
              "      <td>0.00075</td>\n",
              "      <td>0.87836</td>\n",
              "      <td>-0.05882</td>\n",
              "      <td>0.93368</td>\n",
              "      <td>-0.19872</td>\n",
              "      <td>0.87579</td>\n",
              "      <td>-0.17806</td>\n",
              "      <td>0.94294</td>\n",
              "      <td>-0.16581</td>\n",
              "      <td>0.80253</td>\n",
              "      <td>-0.25741</td>\n",
              "      <td>0.76586</td>\n",
              "      <td>-0.27794</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.47938</td>\n",
              "      <td>-0.12371</td>\n",
              "      <td>0.42784</td>\n",
              "      <td>-0.12371</td>\n",
              "      <td>0.70103</td>\n",
              "      <td>-0.39175</td>\n",
              "      <td>0.73196</td>\n",
              "      <td>0.07216</td>\n",
              "      <td>0.26289</td>\n",
              "      <td>-0.21649</td>\n",
              "      <td>0.49485</td>\n",
              "      <td>0.15979</td>\n",
              "      <td>0.45361</td>\n",
              "      <td>-0.11856</td>\n",
              "      <td>0.42268</td>\n",
              "      <td>0.06186</td>\n",
              "      <td>0.50000</td>\n",
              "      <td>-0.27320</td>\n",
              "      <td>0.54639</td>\n",
              "      <td>0.18557</td>\n",
              "      <td>0.42268</td>\n",
              "      <td>0.08247</td>\n",
              "      <td>0.70619</td>\n",
              "      <td>0.19588</td>\n",
              "      <td>0.53396</td>\n",
              "      <td>-0.12447</td>\n",
              "      <td>0.15464</td>\n",
              "      <td>-0.26289</td>\n",
              "      <td>0.47423</td>\n",
              "      <td>0.04124</td>\n",
              "      <td>0.45361</td>\n",
              "      <td>-0.51546</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>348</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.90608</td>\n",
              "      <td>-0.01657</td>\n",
              "      <td>0.98122</td>\n",
              "      <td>-0.01989</td>\n",
              "      <td>0.95691</td>\n",
              "      <td>-0.03646</td>\n",
              "      <td>0.85746</td>\n",
              "      <td>0.00110</td>\n",
              "      <td>0.89724</td>\n",
              "      <td>-0.03315</td>\n",
              "      <td>0.89061</td>\n",
              "      <td>-0.01436</td>\n",
              "      <td>0.90608</td>\n",
              "      <td>-0.04530</td>\n",
              "      <td>0.91381</td>\n",
              "      <td>-0.00884</td>\n",
              "      <td>0.80773</td>\n",
              "      <td>-0.12928</td>\n",
              "      <td>0.88729</td>\n",
              "      <td>0.01215</td>\n",
              "      <td>0.92155</td>\n",
              "      <td>-0.02320</td>\n",
              "      <td>0.91050</td>\n",
              "      <td>-0.02099</td>\n",
              "      <td>0.89147</td>\n",
              "      <td>-0.07760</td>\n",
              "      <td>0.82983</td>\n",
              "      <td>-0.17238</td>\n",
              "      <td>0.96022</td>\n",
              "      <td>-0.03757</td>\n",
              "      <td>0.87403</td>\n",
              "      <td>-0.16243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.95704</td>\n",
              "      <td>-0.12095</td>\n",
              "      <td>0.63318</td>\n",
              "      <td>-0.12690</td>\n",
              "      <td>0.96365</td>\n",
              "      <td>-0.18242</td>\n",
              "      <td>0.97026</td>\n",
              "      <td>0.08460</td>\n",
              "      <td>0.92003</td>\n",
              "      <td>-0.01124</td>\n",
              "      <td>0.83543</td>\n",
              "      <td>-0.24719</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.31395</td>\n",
              "      <td>0.99273</td>\n",
              "      <td>-0.21216</td>\n",
              "      <td>0.98678</td>\n",
              "      <td>-0.21018</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.27165</td>\n",
              "      <td>0.93126</td>\n",
              "      <td>-0.39458</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.19233</td>\n",
              "      <td>0.88793</td>\n",
              "      <td>-0.31565</td>\n",
              "      <td>0.81428</td>\n",
              "      <td>-0.23728</td>\n",
              "      <td>0.89095</td>\n",
              "      <td>-0.31857</td>\n",
              "      <td>0.69531</td>\n",
              "      <td>-0.41573</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>245 rows × 34 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     F1  F2       F3       F4  ...      F31      F32      F33      F34\n",
              "139   1   0  0.94531 -0.03516  ... -1.00000 -0.18750 -1.00000 -0.34375\n",
              "79    1   0  1.00000 -0.06604  ...  1.00000 -0.78555  1.00000 -0.48252\n",
              "116   1   0  0.98182  0.00000  ...  0.60715  0.16465  0.58840  0.17077\n",
              "18    0   0  1.00000 -1.00000  ...  1.00000  1.00000  1.00000  1.00000\n",
              "223   0   0  0.00000  0.00000  ... -1.00000  1.00000  0.00000  0.00000\n",
              "..   ..  ..      ...      ...  ...      ...      ...      ...      ...\n",
              "71    1   0  0.96087  0.08620  ...  0.13756  0.86835  0.09048  0.86285\n",
              "106   1   0  0.99449  0.00526  ...  0.80253 -0.25741  0.76586 -0.27794\n",
              "270   1   0  0.47938 -0.12371  ...  0.47423  0.04124  0.45361 -0.51546\n",
              "348   1   0  0.90608 -0.01657  ...  0.96022 -0.03757  0.87403 -0.16243\n",
              "102   1   0  0.95704 -0.12095  ...  0.89095 -0.31857  0.69531 -0.41573\n",
              "\n",
              "[245 rows x 34 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tWlZHc7esq93"
      },
      "source": [
        " As the values in the dataset are already standardized, we do not need to perform standardization."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ovdtP4v78RRt"
      },
      "source": [
        "## **Logistic regression**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dRT_54TrJ0ed"
      },
      "source": [
        "We have tried different solvers for Logistic regression and chose the best which is ibfgs."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s9aOJcgo8PV6"
      },
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "lr_classifier = LogisticRegression(random_state=10, solver = 'lbfgs')\n",
        "lr_classifier.fit( X_ion_train, y_ion_train)\n",
        "y_predict_lr = lr_classifier.predict(X_ion_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E_7p-FoRKfuv"
      },
      "source": [
        "### The evaluation result of the Logistic Regresstion "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DReE86mFLEAB"
      },
      "source": [
        "**Mean Absolute Error**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qbrnJfdfKjFt",
        "outputId": "b2af5054-d38a-4652-b515-8be4a924ebfb"
      },
      "source": [
        "predictions = lr_classifier.predict(X_ion_test)# Calculate the absolute errors\n",
        "errors = abs(predictions - y_ion_test)# Print out the mean absolute error (mae)\n",
        "print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')\n",
        "#https://towardsdatascience.com/random-forest-in-python-24d0893d51c0"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mean Absolute Error: 0.1 degrees.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LPzw2p6NME7g"
      },
      "source": [
        "**Confusion Matrix**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9qpJM4b4Lb9a"
      },
      "source": [
        "# Confusion Matrix function\n",
        "#adopted from https://github.com/Pitsillides91/Python-Tutorials/blob/master/Introduction%20to%20ML%20-%20Logistic%20Regression%20Example/Introduction%20to%20Machine%20Learning%20-%20Logistic%20Regression%20Example%20(Complete).ipynb\n",
        "\n",
        "def plot_confusion_matrix(cm, classes=None, title='Confusion matrix'):\n",
        "    \"\"\"Plots a confusion matrix.\"\"\"\n",
        "    if classes is not None:\n",
        "        sns.heatmap(cm, cmap=\"YlGnBu\", xticklabels=classes, yticklabels=classes, vmin=0., vmax=1., annot=True, annot_kws={'size':50})\n",
        "    else:\n",
        "        sns.heatmap(cm, vmin=0., vmax=1.)\n",
        "    plt.title(title)\n",
        "    plt.ylabel('True label')\n",
        "    plt.xlabel('Predicted label')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "UAC1w2u0MMcR",
        "outputId": "dfdfbf47-808a-4790-949b-d16ee0883db6"
      },
      "source": [
        "#confusion matrix\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import metrics\n",
        "cm = metrics.confusion_matrix(y_ion_test, predictions)\n",
        "print(cm)\n",
        "cm_norm = cm / cm.sum(axis=1).reshape(-1,1)\n",
        "\n",
        "plot_confusion_matrix(cm_norm, classes = lr_classifier.classes_, title='Confusion matrix')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[27 10]\n",
            " [ 1 67]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WCThlaRVNe1h"
      },
      "source": [
        "**Calculating \n",
        "Training Accuracy, Testing Accuracy\n",
        ", precision\n",
        ", recall \n",
        ", f1-score\n",
        ", support\n",
        "for logistic regression**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m38JzAD-M3Qk",
        "outputId": "b9985cc6-8b58-4e0a-8d80-dbf4cfa9cb49"
      },
      "source": [
        "\n",
        "from sklearn.metrics import r2_score, explained_variance_score, confusion_matrix, accuracy_score, classification_report, log_loss\n",
        "print('\\n')\n",
        "# Accuracy on Train\n",
        "print(\"The Training Accuracy is: \", lr_classifier.score(X_ion_train, y_ion_train))\n",
        "\n",
        "# Accuracy on Test\n",
        "print(\"The Testing Accuracy is: \", lr_classifier.score(X_ion_test, y_ion_test))\n",
        "print('\\n')\n",
        "# Classification Report\n",
        "print(classification_report(y_ion_test, predictions))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "The Training Accuracy is:  0.9224489795918367\n",
            "The Testing Accuracy is:  0.8952380952380953\n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.73      0.83        37\n",
            "           1       0.87      0.99      0.92        68\n",
            "\n",
            "    accuracy                           0.90       105\n",
            "   macro avg       0.92      0.86      0.88       105\n",
            "weighted avg       0.90      0.90      0.89       105\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1gjzHbHNOQ-I"
      },
      "source": [
        "As we have a binary classifier, we need to evaluate it using ROC curve. The higher the AUC, the better the model we have is. Here we can see that there is about 85.8% chance that this classifier make the correct decision."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "id": "RIoGQq82OQVj",
        "outputId": "af94d182-6798-4016-a6cd-fdd6d863ec07"
      },
      "source": [
        "import numpy as np\n",
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.metrics import auc\n",
        "\n",
        "fpr, tpr, thresholds = roc_curve(y_ion_test, predictions)\n",
        "roc_auc = auc(fpr, tpr)\n",
        "\n",
        "plt.plot(fpr, tpr, label='ROC curve (area = %0.3f)' % roc_auc)\n",
        "plt.plot([0, 1], [0, 1], 'k--')  # random predictions curve\n",
        "plt.xlim([0.0, 1.0])\n",
        "plt.ylim([0.0, 1.0])\n",
        "plt.xlabel('False Positive Rate or (1 - Specifity)')\n",
        "plt.ylabel('True Positive Rate or (Sensitivity)')\n",
        "plt.title('Receiver Operating Characteristic')\n",
        "plt.legend(loc=\"lower right\")\n",
        "#helped from stackoverflow.com"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fa2b577d650>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 104
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IPQcm90zJf-M"
      },
      "source": [
        "**10-Fold cross validation**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "z4596iVjJf-P",
        "outputId": "26f2cd65-0bc4-4dbe-8e04-12a8355f1a95"
      },
      "source": [
        "final_ion_set = pd.concat([X_ion, y_ion], axis=1) # Merging inputs matrix and output vector for performing a 10-fold test.\n",
        "final_ion_set"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>F1</th>\n",
              "      <th>F2</th>\n",
              "      <th>F3</th>\n",
              "      <th>F4</th>\n",
              "      <th>F5</th>\n",
              "      <th>F6</th>\n",
              "      <th>F7</th>\n",
              "      <th>F8</th>\n",
              "      <th>F9</th>\n",
              "      <th>F10</th>\n",
              "      <th>F11</th>\n",
              "      <th>F12</th>\n",
              "      <th>F13</th>\n",
              "      <th>F14</th>\n",
              "      <th>F15</th>\n",
              "      <th>F16</th>\n",
              "      <th>F17</th>\n",
              "      <th>F18</th>\n",
              "      <th>F19</th>\n",
              "      <th>F20</th>\n",
              "      <th>F21</th>\n",
              "      <th>F22</th>\n",
              "      <th>F23</th>\n",
              "      <th>F24</th>\n",
              "      <th>F25</th>\n",
              "      <th>F26</th>\n",
              "      <th>F27</th>\n",
              "      <th>F28</th>\n",
              "      <th>F29</th>\n",
              "      <th>F30</th>\n",
              "      <th>F31</th>\n",
              "      <th>F32</th>\n",
              "      <th>F33</th>\n",
              "      <th>F34</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.18829</td>\n",
              "      <td>0.93035</td>\n",
              "      <td>-0.36156</td>\n",
              "      <td>-0.10868</td>\n",
              "      <td>-0.93597</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.04549</td>\n",
              "      <td>0.50874</td>\n",
              "      <td>-0.67743</td>\n",
              "      <td>0.34432</td>\n",
              "      <td>-0.69707</td>\n",
              "      <td>-0.51685</td>\n",
              "      <td>-0.97515</td>\n",
              "      <td>0.05499</td>\n",
              "      <td>-0.62237</td>\n",
              "      <td>0.33109</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>-0.13151</td>\n",
              "      <td>-0.45300</td>\n",
              "      <td>-0.18056</td>\n",
              "      <td>-0.35734</td>\n",
              "      <td>-0.20332</td>\n",
              "      <td>-0.26569</td>\n",
              "      <td>-0.20468</td>\n",
              "      <td>-0.18401</td>\n",
              "      <td>-0.19040</td>\n",
              "      <td>-0.11593</td>\n",
              "      <td>-0.16626</td>\n",
              "      <td>-0.06288</td>\n",
              "      <td>-0.13738</td>\n",
              "      <td>-0.02447</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.03365</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.00485</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.12062</td>\n",
              "      <td>0.88965</td>\n",
              "      <td>0.01198</td>\n",
              "      <td>0.73082</td>\n",
              "      <td>0.05346</td>\n",
              "      <td>0.85443</td>\n",
              "      <td>0.00827</td>\n",
              "      <td>0.54591</td>\n",
              "      <td>0.00299</td>\n",
              "      <td>0.83775</td>\n",
              "      <td>-0.13644</td>\n",
              "      <td>0.75535</td>\n",
              "      <td>-0.08540</td>\n",
              "      <td>0.70887</td>\n",
              "      <td>-0.27502</td>\n",
              "      <td>0.43385</td>\n",
              "      <td>-0.12062</td>\n",
              "      <td>0.57528</td>\n",
              "      <td>-0.40220</td>\n",
              "      <td>0.58984</td>\n",
              "      <td>-0.22145</td>\n",
              "      <td>0.43100</td>\n",
              "      <td>-0.17365</td>\n",
              "      <td>0.60436</td>\n",
              "      <td>-0.24180</td>\n",
              "      <td>0.56045</td>\n",
              "      <td>-0.38238</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.45161</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.71216</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>0.14516</td>\n",
              "      <td>0.54094</td>\n",
              "      <td>-0.39330</td>\n",
              "      <td>-1.00000</td>\n",
              "      <td>-0.54467</td>\n",
              "      <td>-0.69975</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.90695</td>\n",
              "      <td>0.51613</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.20099</td>\n",
              "      <td>0.25682</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.32382</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.02401</td>\n",
              "      <td>0.94140</td>\n",
              "      <td>0.06531</td>\n",
              "      <td>0.92106</td>\n",
              "      <td>-0.23255</td>\n",
              "      <td>0.77152</td>\n",
              "      <td>-0.16399</td>\n",
              "      <td>0.52798</td>\n",
              "      <td>-0.20275</td>\n",
              "      <td>0.56409</td>\n",
              "      <td>-0.00712</td>\n",
              "      <td>0.34395</td>\n",
              "      <td>-0.27457</td>\n",
              "      <td>0.52940</td>\n",
              "      <td>-0.21780</td>\n",
              "      <td>0.45107</td>\n",
              "      <td>-0.17813</td>\n",
              "      <td>0.05982</td>\n",
              "      <td>-0.35575</td>\n",
              "      <td>0.02309</td>\n",
              "      <td>-0.52879</td>\n",
              "      <td>0.03286</td>\n",
              "      <td>-0.65158</td>\n",
              "      <td>0.13290</td>\n",
              "      <td>-0.53206</td>\n",
              "      <td>0.02431</td>\n",
              "      <td>-0.62197</td>\n",
              "      <td>-0.05707</td>\n",
              "      <td>-0.59573</td>\n",
              "      <td>-0.04608</td>\n",
              "      <td>-0.65697</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.02337</td>\n",
              "      <td>-0.00592</td>\n",
              "      <td>-0.09924</td>\n",
              "      <td>-0.11949</td>\n",
              "      <td>-0.00763</td>\n",
              "      <td>-0.11824</td>\n",
              "      <td>0.14706</td>\n",
              "      <td>0.06637</td>\n",
              "      <td>0.03786</td>\n",
              "      <td>-0.06302</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>-0.04572</td>\n",
              "      <td>-0.15540</td>\n",
              "      <td>-0.00343</td>\n",
              "      <td>-0.10196</td>\n",
              "      <td>-0.11575</td>\n",
              "      <td>-0.05414</td>\n",
              "      <td>0.01838</td>\n",
              "      <td>0.03669</td>\n",
              "      <td>0.01519</td>\n",
              "      <td>0.00888</td>\n",
              "      <td>0.03513</td>\n",
              "      <td>-0.01535</td>\n",
              "      <td>-0.03240</td>\n",
              "      <td>0.09223</td>\n",
              "      <td>-0.07859</td>\n",
              "      <td>0.00732</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>-0.00039</td>\n",
              "      <td>0.12011</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>345</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.83508</td>\n",
              "      <td>0.08298</td>\n",
              "      <td>0.73739</td>\n",
              "      <td>-0.14706</td>\n",
              "      <td>0.84349</td>\n",
              "      <td>-0.05567</td>\n",
              "      <td>0.90441</td>\n",
              "      <td>-0.04622</td>\n",
              "      <td>0.89391</td>\n",
              "      <td>0.13130</td>\n",
              "      <td>0.81197</td>\n",
              "      <td>0.06723</td>\n",
              "      <td>0.79307</td>\n",
              "      <td>-0.08929</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>-0.02101</td>\n",
              "      <td>0.96639</td>\n",
              "      <td>0.06618</td>\n",
              "      <td>0.87605</td>\n",
              "      <td>0.01155</td>\n",
              "      <td>0.77521</td>\n",
              "      <td>0.06618</td>\n",
              "      <td>0.95378</td>\n",
              "      <td>-0.04202</td>\n",
              "      <td>0.83479</td>\n",
              "      <td>0.00123</td>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.12815</td>\n",
              "      <td>0.86660</td>\n",
              "      <td>-0.10714</td>\n",
              "      <td>0.90546</td>\n",
              "      <td>-0.04307</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>346</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.95113</td>\n",
              "      <td>0.00419</td>\n",
              "      <td>0.95183</td>\n",
              "      <td>-0.02723</td>\n",
              "      <td>0.93438</td>\n",
              "      <td>-0.01920</td>\n",
              "      <td>0.94590</td>\n",
              "      <td>0.01606</td>\n",
              "      <td>0.96510</td>\n",
              "      <td>0.03281</td>\n",
              "      <td>0.94171</td>\n",
              "      <td>0.07330</td>\n",
              "      <td>0.94625</td>\n",
              "      <td>-0.01326</td>\n",
              "      <td>0.97173</td>\n",
              "      <td>0.00140</td>\n",
              "      <td>0.94834</td>\n",
              "      <td>0.06038</td>\n",
              "      <td>0.92670</td>\n",
              "      <td>0.08412</td>\n",
              "      <td>0.93124</td>\n",
              "      <td>0.10087</td>\n",
              "      <td>0.94520</td>\n",
              "      <td>0.01361</td>\n",
              "      <td>0.93522</td>\n",
              "      <td>0.04925</td>\n",
              "      <td>0.93159</td>\n",
              "      <td>0.08168</td>\n",
              "      <td>0.94066</td>\n",
              "      <td>-0.00035</td>\n",
              "      <td>0.91483</td>\n",
              "      <td>0.04712</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.94701</td>\n",
              "      <td>-0.00034</td>\n",
              "      <td>0.93207</td>\n",
              "      <td>-0.03227</td>\n",
              "      <td>0.95177</td>\n",
              "      <td>-0.03431</td>\n",
              "      <td>0.95584</td>\n",
              "      <td>0.02446</td>\n",
              "      <td>0.94124</td>\n",
              "      <td>0.01766</td>\n",
              "      <td>0.92595</td>\n",
              "      <td>0.04688</td>\n",
              "      <td>0.93954</td>\n",
              "      <td>-0.01461</td>\n",
              "      <td>0.94837</td>\n",
              "      <td>0.02004</td>\n",
              "      <td>0.93784</td>\n",
              "      <td>0.01393</td>\n",
              "      <td>0.91406</td>\n",
              "      <td>0.07677</td>\n",
              "      <td>0.89470</td>\n",
              "      <td>0.06148</td>\n",
              "      <td>0.93988</td>\n",
              "      <td>0.03193</td>\n",
              "      <td>0.92489</td>\n",
              "      <td>0.02542</td>\n",
              "      <td>0.92120</td>\n",
              "      <td>0.02242</td>\n",
              "      <td>0.92459</td>\n",
              "      <td>0.00442</td>\n",
              "      <td>0.92697</td>\n",
              "      <td>-0.00577</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>348</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.90608</td>\n",
              "      <td>-0.01657</td>\n",
              "      <td>0.98122</td>\n",
              "      <td>-0.01989</td>\n",
              "      <td>0.95691</td>\n",
              "      <td>-0.03646</td>\n",
              "      <td>0.85746</td>\n",
              "      <td>0.00110</td>\n",
              "      <td>0.89724</td>\n",
              "      <td>-0.03315</td>\n",
              "      <td>0.89061</td>\n",
              "      <td>-0.01436</td>\n",
              "      <td>0.90608</td>\n",
              "      <td>-0.04530</td>\n",
              "      <td>0.91381</td>\n",
              "      <td>-0.00884</td>\n",
              "      <td>0.80773</td>\n",
              "      <td>-0.12928</td>\n",
              "      <td>0.88729</td>\n",
              "      <td>0.01215</td>\n",
              "      <td>0.92155</td>\n",
              "      <td>-0.02320</td>\n",
              "      <td>0.91050</td>\n",
              "      <td>-0.02099</td>\n",
              "      <td>0.89147</td>\n",
              "      <td>-0.07760</td>\n",
              "      <td>0.82983</td>\n",
              "      <td>-0.17238</td>\n",
              "      <td>0.96022</td>\n",
              "      <td>-0.03757</td>\n",
              "      <td>0.87403</td>\n",
              "      <td>-0.16243</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>349</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.84710</td>\n",
              "      <td>0.13533</td>\n",
              "      <td>0.73638</td>\n",
              "      <td>-0.06151</td>\n",
              "      <td>0.87873</td>\n",
              "      <td>0.08260</td>\n",
              "      <td>0.88928</td>\n",
              "      <td>-0.09139</td>\n",
              "      <td>0.78735</td>\n",
              "      <td>0.06678</td>\n",
              "      <td>0.80668</td>\n",
              "      <td>-0.00351</td>\n",
              "      <td>0.79262</td>\n",
              "      <td>-0.01054</td>\n",
              "      <td>0.85764</td>\n",
              "      <td>-0.04569</td>\n",
              "      <td>0.87170</td>\n",
              "      <td>-0.03515</td>\n",
              "      <td>0.81722</td>\n",
              "      <td>-0.09490</td>\n",
              "      <td>0.71002</td>\n",
              "      <td>0.04394</td>\n",
              "      <td>0.86467</td>\n",
              "      <td>-0.15114</td>\n",
              "      <td>0.81147</td>\n",
              "      <td>-0.04822</td>\n",
              "      <td>0.78207</td>\n",
              "      <td>-0.00703</td>\n",
              "      <td>0.75747</td>\n",
              "      <td>-0.06678</td>\n",
              "      <td>0.85764</td>\n",
              "      <td>-0.06151</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>350 rows × 35 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     F1  F2       F3       F4  ...      F32      F33      F34  Class\n",
              "0     1   0  1.00000 -0.18829  ... -0.06288 -0.13738 -0.02447      0\n",
              "1     1   0  1.00000 -0.03365  ... -0.24180  0.56045 -0.38238      1\n",
              "2     1   0  1.00000 -0.45161  ...  1.00000 -0.32382  1.00000      0\n",
              "3     1   0  1.00000 -0.02401  ... -0.59573 -0.04608 -0.65697      1\n",
              "4     1   0  0.02337 -0.00592  ...  0.00000 -0.00039  0.12011      0\n",
              "..   ..  ..      ...      ...  ...      ...      ...      ...    ...\n",
              "345   1   0  0.83508  0.08298  ... -0.10714  0.90546 -0.04307      1\n",
              "346   1   0  0.95113  0.00419  ... -0.00035  0.91483  0.04712      1\n",
              "347   1   0  0.94701 -0.00034  ...  0.00442  0.92697 -0.00577      1\n",
              "348   1   0  0.90608 -0.01657  ... -0.03757  0.87403 -0.16243      1\n",
              "349   1   0  0.84710  0.13533  ... -0.06678  0.85764 -0.06151      1\n",
              "\n",
              "[350 rows x 35 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zFGux2CdJf-U",
        "outputId": "f44c8824-cf4b-4beb-f910-f39914ab998a"
      },
      "source": [
        "from sklearn.model_selection import KFold\n",
        "from sklearn.metrics import average_precision_score as APS\n",
        "from sklearn.metrics import accuracy_score as AS\n",
        "from sklearn.metrics import f1_score as f1\n",
        "from sklearn.metrics import recall_score as RS\n",
        "\n",
        "APS_score_lr, AS_score_lr, f1_score_lr, RS_score_lr = [], [], [], []\n",
        "\n",
        "kfold = KFold(10, True, 42)\n",
        "\n",
        "for train, test in kfold.split(final_ion_set.values):\n",
        "  Xi_train_kfold, Xi_test_kfold, yi_train_kfold, yi_test_kfold = final_ion_set.iloc[:,:34].values[train], final_ion_set.iloc[:,:34].values[test], \\\n",
        "                                                              final_ion_set.iloc[:,34].values[train], final_ion_set.iloc[:,34].values[test]\n",
        "  lr_classifier.fit(Xi_train_kfold,yi_train_kfold) # Fitting the model.\n",
        "  yi_pred_fold = lr_classifier.predict(Xi_test_kfold)  # Predicting output of the model by inputting x_test subset.\n",
        "  APS_score_lr.append(APS(yi_test_kfold,yi_pred_fold))\n",
        "  AS_score_lr.append(AS(yi_test_kfold,yi_pred_fold))\n",
        "  f1_score_lr.append(f1(yi_test_kfold,yi_pred_fold))\n",
        "  RS_score_lr.append(RS(yi_test_kfold,yi_pred_fold))\n",
        "\n",
        "\n",
        "for i in range(10):\n",
        "  print(f\"For fold {i+1}, Average precision: {'%0.3f' %(APS_score_lr[i]*100)}%\\t\\tAccuracy: {'%0.3f' %(AS_score_lr[i]*100)}%\\t\\tF1:\\\n",
        "   {'%0.3f' %(f1_score_lr[i]*100)}%\\t\\tRecall: {'%0.3f' %(RS_score_lr[i]*100)}%\\n\")\n",
        "\n",
        "print(f\"\\n\\nThe max scores for Logistic regression are: \\nAverage precision score: {'%0.3f' %(max(APS_score_lr)*100)}%\\nAccuracy score:\\\n",
        " {'%0.3f' %(max(AS_score_lr)*100)}%\\nF1 s1ore: {'%0.3f' %(max(f1_score_lr)*100)}%\\nRecall score: {'%0.3f' %(max(RS_score_lr)*100)}%\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "For fold 1, Average precision: 80.796%\t\tAccuracy: 82.857%\t\tF1:   88.000%\t\tRecall: 95.652%\n",
            "\n",
            "For fold 2, Average precision: 79.048%\t\tAccuracy: 82.857%\t\tF1:   86.957%\t\tRecall: 95.238%\n",
            "\n",
            "For fold 3, Average precision: 92.308%\t\tAccuracy: 94.286%\t\tF1:   96.000%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 4, Average precision: 88.462%\t\tAccuracy: 91.429%\t\tF1:   93.878%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 5, Average precision: 74.074%\t\tAccuracy: 80.000%\t\tF1:   85.106%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 6, Average precision: 89.079%\t\tAccuracy: 88.571%\t\tF1:   91.304%\t\tRecall: 91.304%\n",
            "\n",
            "For fold 7, Average precision: 83.278%\t\tAccuracy: 82.857%\t\tF1:   88.000%\t\tRecall: 91.667%\n",
            "\n",
            "For fold 8, Average precision: 88.462%\t\tAccuracy: 91.429%\t\tF1:   93.878%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 9, Average precision: 78.442%\t\tAccuracy: 80.000%\t\tF1:   85.106%\t\tRecall: 90.909%\n",
            "\n",
            "For fold 10, Average precision: 89.437%\t\tAccuracy: 91.429%\t\tF1:   93.023%\t\tRecall: 95.238%\n",
            "\n",
            "\n",
            "\n",
            "The max scores for Logistic regression are: \n",
            "Average precision score: 92.308%\n",
            "Accuracy score: 94.286%\n",
            "F1 s1ore: 96.000%\n",
            "Recall score: 100.000%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xOJoTuLED8vZ"
      },
      "source": [
        "## **Support Vector Machine**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vOS4fd7CCQmP"
      },
      "source": [
        "from sklearn.svm import SVC\n",
        "\n",
        "svm_classifier = SVC(kernel= 'rbf', gamma='auto') #after some research, we chose rbf\n",
        "svm_classifier.fit( X_ion_train, y_ion_train)\n",
        "y_predict_svm = svm_classifier.predict(X_ion_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S3CLLLRv6ygI"
      },
      "source": [
        "\n",
        "### The evaluation result of the SVM "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "95hu8T1v7RWZ"
      },
      "source": [
        "**Mean Absolute Error**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "25A6G94E7ICA",
        "outputId": "8c19c974-1052-45ec-cccf-814bb25a45a5"
      },
      "source": [
        "# Use the predict method on the test data\n",
        "X_test=X_ion_test\n",
        "Y_test=y_ion_test\n",
        "errors = abs(y_predict_svm - Y_test)# Print out the mean absolute error (mae)\n",
        "print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')\n",
        "#https://towardsdatascience.com/random-forest-in-python-24d0893d51c0"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mean Absolute Error: 0.08 degrees.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5n0fJDJU691r"
      },
      "source": [
        "**Confusion Matrix**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "uZsjo4mI77UR",
        "outputId": "580e97e2-ba6f-4159-cb2e-9b690cdebf7b"
      },
      "source": [
        "cm = metrics.confusion_matrix(y_ion_test, y_predict_svm)\n",
        "print(cm)\n",
        "cm_norm = cm / cm.sum(axis=1).reshape(-1,1)\n",
        "\n",
        "plot_confusion_matrix(cm_norm, classes = svm_classifier.classes_, title='Confusion matrix')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[30  7]\n",
            " [ 1 67]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cHWt-YcN8TaM"
      },
      "source": [
        "**Calculating \n",
        "Training Accuracy, Testing Accuracy\n",
        ",precision\n",
        ",recall \n",
        ",f1-score\n",
        ",support\n",
        "for SVM**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ym_aAuDW8VIk",
        "outputId": "1ca7f982-2c39-414c-cb68-770df3bf57aa"
      },
      "source": [
        "print('\\n')\n",
        "# Accuracy on Train\n",
        "print(\"The Training Accuracy is: \", svm_classifier.score(X_ion_train, y_ion_train))\n",
        "\n",
        "# Accuracy on Test\n",
        "print(\"The Testing Accuracy is: \", svm_classifier.score(X_ion_test, y_ion_test))\n",
        "print('\\n')\n",
        "# Classification Report\n",
        "print(classification_report(y_ion_test, y_predict_svm))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "The Training Accuracy is:  0.9469387755102041\n",
            "The Testing Accuracy is:  0.9238095238095239\n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.81      0.88        37\n",
            "           1       0.91      0.99      0.94        68\n",
            "\n",
            "    accuracy                           0.92       105\n",
            "   macro avg       0.94      0.90      0.91       105\n",
            "weighted avg       0.93      0.92      0.92       105\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8DCuDEzA8_wd"
      },
      "source": [
        "As we have a binary classifier, we need to evaluate it using ROC curve. The higher the AUC, the better the model we have is. Here we can see that there is about 89.8% chance that this classifier make the correct decision, which is slightly greater than our logistics regression (85.8%)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "id": "KTPo_Z8R9DT1",
        "outputId": "c5d09ab2-8299-4afd-d893-254f7ce83222"
      },
      "source": [
        "fpr, tpr, thresholds = roc_curve(y_ion_test, y_predict_svm)\n",
        "roc_auc = auc(fpr, tpr)\n",
        "\n",
        "plt.plot(fpr, tpr, label='ROC curve (area = %0.3f)' % roc_auc)\n",
        "plt.plot([0, 1], [0, 1], 'k--')  # random predictions curve\n",
        "plt.xlim([0.0, 1.0])\n",
        "plt.ylim([0.0, 1.0])\n",
        "plt.xlabel('False Positive Rate or (1 - Specifity)')\n",
        "plt.ylabel('True Positive Rate or (Sensitivity)')\n",
        "plt.title('Receiver Operating Characteristic')\n",
        "plt.legend(loc=\"lower right\")\n",
        "#helped from stackoverflow.com"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fa2b625ee90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 111
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zcerKnZ0PFfU"
      },
      "source": [
        "**10-Fold cross validation**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NLsHXPa-PFfW",
        "outputId": "02c9a8f2-680b-4856-9fd9-e1ab6dd0fb0c"
      },
      "source": [
        "APS_score_svm, AS_score_svm, f1_score_svm, RS_score_svm = [], [], [], []\n",
        "\n",
        "kfold = KFold(10, True, 42)\n",
        "\n",
        "for train, test in kfold.split(final_ion_set.values):\n",
        "  Xi_train_kfold, Xi_test_kfold, yi_train_kfold, yi_test_kfold = final_ion_set.iloc[:,:34].values[train], final_ion_set.iloc[:,:34].values[test], \\\n",
        "                                                              final_ion_set.iloc[:,34].values[train], final_ion_set.iloc[:,34].values[test]\n",
        "  svm_classifier.fit(Xi_train_kfold,yi_train_kfold) # Fitting the model.\n",
        "  yi_pred_fold = svm_classifier.predict(Xi_test_kfold)  # Predicting output of the model by inputting x_test subset.\n",
        "  APS_score_svm.append(APS(yi_test_kfold,yi_pred_fold))\n",
        "  AS_score_svm.append(AS(yi_test_kfold,yi_pred_fold))\n",
        "  f1_score_svm.append(f1(yi_test_kfold,yi_pred_fold))\n",
        "  RS_score_svm.append(RS(yi_test_kfold,yi_pred_fold))\n",
        "\n",
        "\n",
        "for i in range(10):\n",
        "  print(f\"For fold {i+1}, Average precision: {'%.3f' %(APS_score_svm[i]*100)}%\\t\\tAccuracy: {'%.3f' %(AS_score_svm[i]*100)}%\\t\\tF1:\\\n",
        "   {'%.3f' %(f1_score_svm[i]*100)}%\\t\\tRecall: {'%.3f' %(RS_score_svm[i]*100)}%\\n\")\n",
        "\n",
        "print(f\"\\n\\nThe max scores for Support vector machine are: \\nAverage precision score: {'%.3f' %(max(APS_score_svm)*100)}%\\nAccuracy score:\\\n",
        " {'%.3f' %(max(AS_score_svm)*100)}%\\nF1 score: {'%.3f' %(max(f1_score_svm)*100)}%\\nRecall score: {'%.3f' %(max(RS_score_svm)*100)}%\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "For fold 1, Average precision: 88.462%\t\tAccuracy: 91.429%\t\tF1:   93.878%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 2, Average precision: 89.437%\t\tAccuracy: 91.429%\t\tF1:   93.023%\t\tRecall: 95.238%\n",
            "\n",
            "For fold 3, Average precision: 96.000%\t\tAccuracy: 97.143%\t\tF1:   97.959%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 4, Average precision: 95.833%\t\tAccuracy: 97.143%\t\tF1:   97.872%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 5, Average precision: 80.000%\t\tAccuracy: 85.714%\t\tF1:   88.889%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 6, Average precision: 95.833%\t\tAccuracy: 97.143%\t\tF1:   97.872%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 7, Average precision: 91.024%\t\tAccuracy: 91.429%\t\tF1:   93.878%\t\tRecall: 95.833%\n",
            "\n",
            "For fold 8, Average precision: 92.000%\t\tAccuracy: 94.286%\t\tF1:   95.833%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 9, Average precision: 88.000%\t\tAccuracy: 91.429%\t\tF1:   93.617%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 10, Average precision: 95.455%\t\tAccuracy: 97.143%\t\tF1:   97.674%\t\tRecall: 100.000%\n",
            "\n",
            "\n",
            "\n",
            "The max scores for Support vector machine are: \n",
            "Average precision score: 96.000%\n",
            "Accuracy score: 97.143%\n",
            "F1 score: 97.959%\n",
            "Recall score: 100.000%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ddidJ5utEkUj"
      },
      "source": [
        "## **Random forest**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z-6rJ7oitIhW"
      },
      "source": [
        "Max depth relates to the longest path from the root node to the leaf node. We searched for tuning the random forest method and noticed that if we have a noisy and large amount of data, it is better to prone the number of leaf nodes since it helps improve the f1 score and prevents over-fitting.\n",
        "We tested a variety of depths and observed there is not much difference among them, and I think it is because of the size of the data set. All in all, I think it is better to consider the default depth, meaning that we can clean the max depth object."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qCHvl8-REYHT"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.datasets import make_classification\n",
        "\n",
        "rf_classifier = RandomForestClassifier(max_depth=2, random_state=0)\n",
        "rf_classifier.fit( X_ion_train, y_ion_train)\n",
        "y_predict_rf = rf_classifier.predict(X_ion_test)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t7AadkuG-Xy8"
      },
      "source": [
        "\n",
        "### The evaluation result of the random forest"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JnzKNcmc_A9Q"
      },
      "source": [
        "**Mean absolute error**\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Z8F1OR8_AeN",
        "outputId": "9fee5351-cc02-4536-d00b-3f08093f8815"
      },
      "source": [
        "errors = abs(y_predict_rf - y_ion_test)# Print out the mean absolute error (mae)\n",
        "print('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')\n",
        "#https://towardsdatascience.com/random-forest-in-python-24d0893d51c0"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mean Absolute Error: 0.1 degrees.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t3k0Nd9P_UNH"
      },
      "source": [
        "**Confusin Matrix**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "4ckZyNa1_Zvw",
        "outputId": "080f1079-063b-42f0-c00c-abfcb68daed1"
      },
      "source": [
        "#confusion matrix\n",
        "cm = metrics.confusion_matrix(y_ion_test, y_predict_rf)\n",
        "print(cm)\n",
        "cm_norm = cm / cm.sum(axis=1).reshape(-1,1)\n",
        "\n",
        "plot_confusion_matrix(cm_norm, classes = rf_classifier.classes_, title='Confusion matrix')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[28  9]\n",
            " [ 1 67]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WPRlATlemBZi"
      },
      "source": [
        "**Calculating \n",
        "Training Accuracy, Testing Accuracy\n",
        ", precision\n",
        ", recall \n",
        ", f1-score\n",
        ", support\n",
        "for SVM**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yICYjsns_5KX",
        "outputId": "a0fa0280-745b-4b88-e7b1-49c577eb3e89"
      },
      "source": [
        "print('\\n')\n",
        "# Accuracy on Train\n",
        "print(\"The Training Accuracy is: \", rf_classifier.score(X_ion_train, y_ion_train))\n",
        "\n",
        "# Accuracy on Test\n",
        "print(\"The Testing Accuracy is: \", rf_classifier.score(X_ion_test, y_ion_test))\n",
        "print('\\n')\n",
        "# Classification Report\n",
        "print(classification_report(y_ion_test, y_predict_rf))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "\n",
            "The Training Accuracy is:  0.9387755102040817\n",
            "The Testing Accuracy is:  0.9047619047619048\n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.76      0.85        37\n",
            "           1       0.88      0.99      0.93        68\n",
            "\n",
            "    accuracy                           0.90       105\n",
            "   macro avg       0.92      0.87      0.89       105\n",
            "weighted avg       0.91      0.90      0.90       105\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "id": "TFtquywmATOY",
        "outputId": "3ea6f118-b154-4f84-c25e-3fa33e452bd0"
      },
      "source": [
        "fpr, tpr, thresholds = roc_curve(y_ion_test, y_predict_rf)\n",
        "roc_auc = auc(fpr, tpr)\n",
        "\n",
        "plt.plot(fpr, tpr, label='ROC curve (area = %0.3f)' % roc_auc)\n",
        "plt.plot([0, 1], [0, 1], 'k--')  # random predictions curve\n",
        "plt.xlim([0.0, 1.0])\n",
        "plt.ylim([0.0, 1.0])\n",
        "plt.xlabel('False Positive Rate or (1 - Specifity)')\n",
        "plt.ylabel('True Positive Rate or (Sensitivity)')\n",
        "plt.title('Receiver Operating Characteristic')\n",
        "plt.legend(loc=\"lower right\")\n",
        "#helped from stackoverflow.com"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fa2b583e7d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 117
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AtUxumEYPG8Y"
      },
      "source": [
        "**10-Fold cross validation**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iI8WUZR7PG8b",
        "outputId": "7851118b-9e7b-46e1-fdf2-26d1f768cc95"
      },
      "source": [
        "APS_score_rf, AS_score_rf, f1_score_rf, RS_score_rf = [], [], [], []\n",
        "\n",
        "kfold = KFold(10, True, 42)\n",
        "\n",
        "for train, test in kfold.split(final_ion_set.values):\n",
        "  Xi_train_kfold, Xi_test_kfold, yi_train_kfold, yi_test_kfold = final_ion_set.iloc[:,:34].values[train], final_ion_set.iloc[:,:34].values[test], \\\n",
        "                                                              final_ion_set.iloc[:,34].values[train], final_ion_set.iloc[:,34].values[test]\n",
        "  rf_classifier.fit(Xi_train_kfold,yi_train_kfold) # Fitting the model.\n",
        "  yi_pred_fold = rf_classifier.predict(Xi_test_kfold)  # Predicting output of the model by inputting x_test subset.\n",
        "  APS_score_rf.append(APS(yi_test_kfold,yi_pred_fold))\n",
        "  AS_score_rf.append(AS(yi_test_kfold,yi_pred_fold))\n",
        "  f1_score_rf.append(f1(yi_test_kfold,yi_pred_fold))\n",
        "  RS_score_rf.append(RS(yi_test_kfold,yi_pred_fold))\n",
        "\n",
        "\n",
        "for i in range(10):\n",
        "  print(f\"For fold {i+1}, Average precision: {'%.3f' %(APS_score_rf[i]*100)}%\\t\\tAccuracy: {'%.3f' %(AS_score_rf[i]*100)}%\\t\\tF1: \\\n",
        "   {'%.3f' %(f1_score_rf[i]*100)}%\\t\\tRecall: {'%.3f' %(RS_score_rf[i]*100)}%\\n\")\n",
        "\n",
        "print(f\"\\n\\nThe max scores for Logistic regression are: \\nAverage precision score: {'%.3f' %(max(APS_score_rf)*100)}%\\nAccuracy score: \\\n",
        " {'%.3f' %(max(AS_score_rf)*100)}%\\nF1 score: {'%.3f' %(max(f1_score_rf)*100)}%\\nRecall score: {'%.3f' %(max(RS_score_rf)*100)}%\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "For fold 1, Average precision: 85.185%\t\tAccuracy: 88.571%\t\tF1:    92.000%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 2, Average precision: 89.437%\t\tAccuracy: 91.429%\t\tF1:    93.023%\t\tRecall: 95.238%\n",
            "\n",
            "For fold 3, Average precision: 100.000%\t\tAccuracy: 100.000%\t\tF1:    100.000%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 4, Average precision: 92.000%\t\tAccuracy: 94.286%\t\tF1:    95.833%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 5, Average precision: 74.074%\t\tAccuracy: 80.000%\t\tF1:    85.106%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 6, Average precision: 92.000%\t\tAccuracy: 94.286%\t\tF1:    95.833%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 7, Average precision: 88.889%\t\tAccuracy: 91.429%\t\tF1:    94.118%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 8, Average precision: 85.185%\t\tAccuracy: 88.571%\t\tF1:    92.000%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 9, Average precision: 91.667%\t\tAccuracy: 94.286%\t\tF1:    95.652%\t\tRecall: 100.000%\n",
            "\n",
            "For fold 10, Average precision: 87.500%\t\tAccuracy: 91.429%\t\tF1:    93.333%\t\tRecall: 100.000%\n",
            "\n",
            "\n",
            "\n",
            "The max scores for Logistic regression are: \n",
            "Average precision score: 100.000%\n",
            "Accuracy score:  100.000%\n",
            "F1 score: 100.000%\n",
            "Recall score: 100.000%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5ivdq742uXk4"
      },
      "source": [
        "#Comparison of three models"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NArb5V7Iqpas"
      },
      "source": [
        "**Comparing AUC of three models**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I6rxSJ7Q_7NH"
      },
      "source": [
        "As we have a binary classifier, we need to evaluate it using ROC curve. The higher the AUC, the better the model we have is. Here we can see that there is about 87.1% chance that this classifier make the correct decision.\n",
        "\n",
        "AUC for lr: 85.8%\n",
        "\n",
        "AUC for rf: 87.1%\n",
        "\n",
        "AUC for svm: 89.8%\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UXI8N9-DuBd4"
      },
      "source": [
        "**Looking at each model scores all at one glance.**\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "r_MthrdfE5V6",
        "outputId": "c93bb3d2-f73f-411b-da56-bfd1e9675375"
      },
      "source": [
        "indecis = ['Logistic regression model', 'SVM model', 'Random forest model']\n",
        "columns = ['Avg. precision score', 'Accuracy score', 'F1 score', 'Recall score', 'APS 10-fold max', 'AS 10-fold max', 'f1 10-fold max', 'RS 10-fold max']\n",
        "data1 = np.array([[APS(y_ion_test,y_predict_lr), APS(y_ion_test,y_predict_svm), APS(y_ion_test,y_predict_rf)], \n",
        "                [AS(y_ion_test,y_predict_lr), AS(y_ion_test,y_predict_svm), AS(y_ion_test,y_predict_rf)], \n",
        "                [f1(y_ion_test,y_predict_lr), f1(y_ion_test,y_predict_svm), f1(y_ion_test,y_predict_rf)],\n",
        "                [RS(y_ion_test,y_predict_lr), RS(y_ion_test,y_predict_svm), RS(y_ion_test,y_predict_rf)],\n",
        "                [max(APS_score_lr), max(APS_score_svm),max(APS_score_rf)],\n",
        "                [max(AS_score_lr), max(AS_score_svm),max(AS_score_rf)],\n",
        "                [max(f1_score_lr), max(f1_score_svm),max(f1_score_rf)],\n",
        "                [max(RS_score_lr), max(RS_score_svm),max(RS_score_rf)]]).T\n",
        "results = pd.DataFrame( data= data1, index=indecis, columns=columns)\n",
        "results"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Avg. precision score</th>\n",
              "      <th>Accuracy score</th>\n",
              "      <th>F1 score</th>\n",
              "      <th>Recall score</th>\n",
              "      <th>APS 10-fold max</th>\n",
              "      <th>AS 10-fold max</th>\n",
              "      <th>f1 10-fold max</th>\n",
              "      <th>RS 10-fold max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Logistic regression model</th>\n",
              "      <td>0.866858</td>\n",
              "      <td>0.895238</td>\n",
              "      <td>0.924138</td>\n",
              "      <td>0.985294</td>\n",
              "      <td>0.923077</td>\n",
              "      <td>0.942857</td>\n",
              "      <td>0.960000</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SVM model</th>\n",
              "      <td>0.901614</td>\n",
              "      <td>0.923810</td>\n",
              "      <td>0.943662</td>\n",
              "      <td>0.985294</td>\n",
              "      <td>0.960000</td>\n",
              "      <td>0.971429</td>\n",
              "      <td>0.979592</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Random forest model</th>\n",
              "      <td>0.878138</td>\n",
              "      <td>0.904762</td>\n",
              "      <td>0.930556</td>\n",
              "      <td>0.985294</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                           Avg. precision score  ...  RS 10-fold max\n",
              "Logistic regression model              0.866858  ...             1.0\n",
              "SVM model                              0.901614  ...             1.0\n",
              "Random forest model                    0.878138  ...             1.0\n",
              "\n",
              "[3 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vbisEl8_uvEJ"
      },
      "source": [
        " We observe that Logistic regression performs weaker than Random forest and SVM"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rESCi3JrBY77"
      },
      "source": [
        "## **T test**\n",
        "We want to see if our models are  are statistically different. We choose to do the t test with f1."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uzjwpWDoJmq8"
      },
      "source": [
        "X_ion = X_ion.to_numpy()\n",
        "y_ion = y_ion.to_numpy()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m-18F81aDfk3",
        "outputId": "806c897b-46d3-457c-b031-83c7c75874f8"
      },
      "source": [
        "#this part might be needed based on the environment you use to run this code\n",
        "!pip install mlxtend"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: mlxtend in /usr/local/lib/python3.7/dist-packages (0.14.0)\n",
            "Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (0.22.2.post1)\n",
            "Requirement already satisfied: scipy>=0.17 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (1.4.1)\n",
            "Requirement already satisfied: numpy>=1.10.4 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (1.19.5)\n",
            "Requirement already satisfied: matplotlib>=1.5.1 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (3.2.2)\n",
            "Requirement already satisfied: pandas>=0.17.1 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (1.1.5)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from mlxtend) (54.0.0)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.18->mlxtend) (1.0.1)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->mlxtend) (2.4.7)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->mlxtend) (2.8.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->mlxtend) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->mlxtend) (0.10.0)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.17.1->mlxtend) (2018.9)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib>=1.5.1->mlxtend) (1.15.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gQN3add3o3A-"
      },
      "source": [
        "**Comparing Random forest and SVM**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JXwxDHh_oRTM"
      },
      "source": [
        "This method performs t-test using k-fold test results. The cv value represents k and is set as 10 here.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YcomBInahfXe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5214326e-420d-4f21-9b79-a754f485b623"
      },
      "source": [
        "from mlxtend.evaluate import paired_ttest_kfold_cv\n",
        "# check if difference between algorithms is real\n",
        "t, p = paired_ttest_kfold_cv(estimator1=rf_classifier, \n",
        "                          estimator2=svm_classifier, \n",
        "                          X=X_ion, \n",
        "                          y=y_ion,\n",
        "                          cv=10,\n",
        "                          scoring='f1', \n",
        "                          random_seed=1)\n",
        "print(f' P-value is = {p:.3f}')\n",
        "print(f' t-statistics is = {t:.3f}')\n",
        "\n",
        "if p <= 0.05:\n",
        "    print('Since p<0.05, We can reject the null-hypothesis that both models perform equally well on this dataset. We may conclude that the two algorithms are significantly different.')\n",
        "else:\n",
        "    print('Since p>0.05, we cannot reject the null hypothesis and may conclude that the performance of the two algorithms is not significantly different.')\n",
        "#https://docs.silverhammer.ai/generated/silverhammer.benchmark.statistics.paired_ttest_kfold_cv.html"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            " P-value is = 0.331\n",
            " t-statistics is = -1.027\n",
            "Since p>0.05, we cannot reject the null hypothesis and may conclude that the performance of the two algorithms is not significantly different.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9fMUHCrUDmHE"
      },
      "source": [
        "It shows that using f1, the performance of Random forest and SVM is not significantly different."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GeReE3vLpE8x"
      },
      "source": [
        "**Comparing Random forest and Logistic regression**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mZi47mktD7dC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a2caeb83-f2b8-42fd-b2dc-293a12ef4b11"
      },
      "source": [
        "from mlxtend.evaluate import paired_ttest_kfold_cv\n",
        "# check if difference between algorithms is real\n",
        "t, p = paired_ttest_kfold_cv(estimator1=rf_classifier, \n",
        "                          estimator2=lr_classifier, \n",
        "                          X=X_ion, \n",
        "                          y=y_ion, \n",
        "                          cv=10,\n",
        "                          scoring='f1', \n",
        "                          random_seed=1)\n",
        "print(f' P-value is = {p:.3f}')\n",
        "print(f' t-statistics is = {t:.3f}')\n",
        "\n",
        "if p <= 0.05:\n",
        "    print('Since p<0.05, We can reject the null-hypothesis that both models perform equally well on this dataset. We may conclude that the two algorithms are significantly different.')\n",
        "else:\n",
        "    print('Since p>0.05, we cannot reject the null hypothesis and may conclude that the performance of the two algorithms is not significantly different.')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            " P-value is = 0.004\n",
            " t-statistics is = 3.832\n",
            "Since p<0.05, We can reject the null-hypothesis that both models perform equally well on this dataset. We may conclude that the two algorithms are significantly different.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zxhxe1tPELsS"
      },
      "source": [
        "It shows that using f1,  we can reject the null-hypothesis that both Random forest and Logistic regression perform the same."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c7-LHO-Opb9p"
      },
      "source": [
        "**Comparing SVM and Logistic regression**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PbtusLOaEebu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5e6d64ad-dbff-43fd-fbe8-34ba9478932d"
      },
      "source": [
        "# check if difference between algorithms is real\n",
        "t, p = paired_ttest_kfold_cv(estimator1=lr_classifier, \n",
        "                          estimator2=svm_classifier, \n",
        "                          X=X_ion, \n",
        "                          y=y_ion, \n",
        "                          cv=10,\n",
        "                          scoring='f1',\n",
        "                          random_seed=1)\n",
        "print(f' P-value is = {p:.3f}')\n",
        "print(f' t-statistics is = {t:.3f}')\n",
        "\n",
        "if p <= 0.05:\n",
        "    print('Since p<0.05, We can reject the null-hypothesis that both models perform equally well on this dataset. We may conclude that the two algorithms are significantly different.')\n",
        "else:\n",
        "    print('Since p>0.05, we cannot reject the null hypothesis and may conclude that the performance of the two algorithms is not significantly different.')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            " P-value is = 0.002\n",
            " t-statistics is = -4.256\n",
            "Since p<0.05, We can reject the null-hypothesis that both models perform equally well on this dataset. We may conclude that the two algorithms are significantly different.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YOsqj-dNFrnQ"
      },
      "source": [
        "It shows that using f1, we can reject the null-hypothesis that both of the SVM and Logistic regression perform equally well on this dataset.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VXUVHs1SpxBv"
      },
      "source": [
        "# Conclusion"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E6YIcEBAptnD"
      },
      "source": [
        "In this task, we compared three classifiers on the same dataset. It is clear that there are differences between important metric results such as f1 score, AUC, precision, recall, accuuracy, etc.\n",
        "\n",
        "However, the t-test results show that Random forest and SVM are not significantly different. By using these two sets of results, we conclude that Logistic regression performs weaker than Random forest and SVM. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pd3OpTalq_f0"
      },
      "source": [
        "# References\n",
        "https://docs.silverhammer.ai\n",
        "\n",
        "http://rasbt.github.io/mlxtend/user_guide/evaluate/paired_ttest_kfold_cv/\n",
        "\n",
        "https://pythonexamples.org/convert-pandas-dataframe-to-numpy-array/\n",
        "\n",
        "https://stackoverflow.com/\n",
        "\n",
        "https://towardsdatascience.com/\n",
        "\n",
        "\n",
        "https://scikit-learn.org/stable/\n",
        "\n",
        "https://pandas.pydata.org/pandas-docs/stable/reference/frame.html\n",
        "\n",
        "\n",
        "https://github.com/Pitsillides91/Python-Tutorials/blob/master/Introduction%20to%20ML%20-%20Logistic%20Regression%20Example/Introduction%20to%20Machine%20Learning%20-%20Logistic%20Regression%20Example%20(Complete).ipynb\n",
        "\n"
      ]
    }
  ]
}